
""" libbf_dp4a_generated.py 

Python wrapper generated with bragr (bifrost)
"""

from ctypesgen.libraryloader import load_library, add_library_search_dirs 
from ctypesgen.printer_python.preamble import *
from bifrost.libbifrost_generated import BFarray, BFstatus

add_library_search_dirs("/home/dancpr/software/bf_plugins/bf_dp4a/build")

_libs={}
_libs["bf_dp4a"] = load_library("bf_dp4a")
for _lib in _libs.values():
    if not _lib.has("XcorrLite", "cdecl"):
        continue
    _XcorrLite = _lib.get("XcorrLite", "cdecl")
    _XcorrLite.argtypes = [POINTER(BFarray),POINTER(BFarray),c_int,]
    _XcorrLite.restype = BFstatus

    def XcorrLite(data, xcorr, reset, ):
        """
        Python wrapper for _XcorrLite -- generated by bragr (bifrost)
        Args:
            data: POINTER(BFarray)
            xcorr: POINTER(BFarray)
            reset: int,
            
        """
        _XcorrLite(data, xcorr, reset, )
    break 

for _lib in _libs.values():
    if not _lib.has("BeanFarmer", "cdecl"):
        continue
    _BeanFarmer = _lib.get("BeanFarmer", "cdecl")
    _BeanFarmer.argtypes = [POINTER(BFarray),POINTER(BFarray),POINTER(BFarray),c_int,]
    _BeanFarmer.restype = BFstatus

    def BeanFarmer(voltages, weights, beamformed_out, NACCUMULATE, ):
        """
        Python wrapper for _BeanFarmer -- generated by bragr (bifrost)
        Args:
            voltages: POINTER(BFarray)
            weights: POINTER(BFarray)
            beamformed_out: POINTER(BFarray)
            NACCUMULATE: int,
            
        """
        _BeanFarmer(voltages, weights, beamformed_out, NACCUMULATE, )
    break 
